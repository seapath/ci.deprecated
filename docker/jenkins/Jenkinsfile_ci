/*****************************************************************************
 * Copyright (C) 2021, RTE (http://www.rte-france.com)
 * SPDX-License-Identifier: CC-BY-4.0
 *
 * Jenkins pipeline to be triggered after the synchronization of Gerrit
 * and GitLab (sfl/master branches).
 * - Fetch sources from rte-sfl.xml and GitLab ansible
 * - Restart machines on the infrastructure to boot from PXE server
 * - Build corresponding images and flash each machine
 * - Reboot with the installed images
 * - Configure and pass tests on every machine
 * - Deploy, configure and test the VMs on the cluster
 * - If all previous steps succeed, start 'merge' job
 *
 * Requirements:
 * - Install plugins: SSH Agent, Blue Ocean, Junit, Pipeline Utility Steps and
 * Throttle Concurrent Builds
 * - Set SSH key with name 'gitlab-credentials' and 'cluster'
 * - Configure Throttle Concurrent Builds according to README.md
 *****************************************************************************/

// Parametrized properties. Default values can be overwritten by setting the
// configuration file /var/jenkins_home/jenkins.properties
def def_values = [GITLAB_URL: "10.132.156.199:2200",
                  GITLAB_USER: "root",
                  REPO_BRANCH: "sfl/master"]
def p // Global variable to handle properties

pipeline {
    agent any

    // Prevent concurrent execution of jobs tagged with "cluster" category
    options {
        throttleJobProperty(
            categories: ['cluster'],
            throttleEnabled: true,
            throttleOption: 'category',
            maxConcurrentPerNode: 1,
            maxConcurrentTotal: 1)
    }

    // TODO: Add gitlab server fingerprints to known_hosts instead
    environment {
        GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no"
        YOCTO_CACHE_DIR = "/var/jenkins_home/yocto"
        CQFD_EXTRA_RUN_ARGS = "-v ${YOCTO_CACHE_DIR}/dl:/mnt/dl -e DL_DIR=/mnt/dl \
        -v ${YOCTO_CACHE_DIR}/sstate:/mnt/sstate -e SSTATE_DIR=/mnt/sstate"
        IMAGES_DIR = "/var/jenkins_home/images"
        BUILD_DIR = "build/tmp/deploy/images/votp"
        CONFIG_FILE = "/var/jenkins_home/jenkins.properties"
    }

    stages {

        stage("1. Prepare workspace") {
            steps {
                cleanWs()
                script {
                    stage("1.1 Read Config File") {
                        p = readProperties defaults: def_values, file: "${CONFIG_FILE}"
                    }
                    stage("1.2. Fetch Sources") {
                        sshagent(credentials : ['gitlab-credentials']) {
                            sh """
                                repo init -u "ssh://git@$p.GITLAB_URL/$p.GITLAB_USER/repo-manifest.git" \
                                -m "rte-sfl.xml" -b "$p.REPO_BRANCH"
                                repo sync
                                cqfd init
                            """
                        }
                    }
                    stage("1.3. Ansible Prepare") {
                        sshagent(credentials : ['gitlab-credentials']) {
                            sh """
                                git clone -b sfl/master \
                                "[git@$p.GITLAB_URL]:$p.GITLAB_USER/ansible.git"
                                cd ansible
                                ./prepare.sh
                                echo "host_key_checking = False" >> ansible.cfg
                                ansible localhost -m ping
                            """
                        }
                    }
                    stage("1.4. Set SSH Key for Ansible") {
                        sshagent(credentials : ['cluster']) {
                            sh "ssh-add -L > keys/ansible_public_ssh_key.pub"
                        }
                    }
                    stage("1.5. Create Images Dir") {
                        sh "mkdir -p -v ${IMAGES_DIR}"
                    }
                }
            }
        }

        stage ("2. Build Images") {
            steps {
                script {
                    stage("2.1. Build Host Bios") {
                        sh """
                            cqfd -b host_bios
                            cp ${BUILD_DIR}/seapath-host-bios-image-votp.wic.* ${IMAGES_DIR}
                        """
                    }
                    stage("2.2. Build Observer BIOS") {
                        sh """
                            cqfd -b monitor_bios
                            cp ${BUILD_DIR}/seapath-monitor-bios-image-votp.wic.* ${IMAGES_DIR}
                        """
                    }
                    stage("2.3. Build PXE Flasher") {
                        sh """
                            cqfd -b flash_pxe
                            cp ${BUILD_DIR}/seapath-flash-pxe-votp.cpio.gz ${IMAGES_DIR}
                            cp ${BUILD_DIR}/bzImage ${IMAGES_DIR}
                        """
                    }
                    stage("2.4. Build Guest EFI") {
                        sh """
                            cqfd -b guest_efi
                            cp ${BUILD_DIR}/seapath-guest-efi-image-votp.wic.qcow2 ${IMAGES_DIR}
                        """
                    }
                }
            }
        }

        stage("3. Boot from PXE") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            playbooks/ci_prepare_machine.yaml
                        """
                    }
                }
            }
        }

        stage ("4. Flash Images") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            playbooks/ci_flash_disk.yaml
                        """
                    }
                }
            }
        }

        stage("5. Configure Hosts") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            playbooks/ci_configure_hosts.yaml
                        """
                    }
                }
            }
        }

        stage("6. Test Hosts") {
            steps {
                script {
                    stage("6.1. Test Common") {
                        sshagent(credentials : ['cluster']) {
                            sh """
                                cd ansible
                                ansible-playbook -i inventories/sfl_ci.yaml \
                                playbooks/ci_common_tests.yaml
                            """
                        }
                        junit "ansible/playbooks/common/*/cukinia_common.xml"
                    }
                    stage("6.2. Test Hypervisors") {
                        sshagent(credentials : ['cluster']) {
                            sh """
                                cd ansible
                                ansible-playbook -i inventories/sfl_ci.yaml \
                                playbooks/ci_hypervisor_tests.yaml
                            """
                        }
                        junit "ansible/playbooks/hypervisor/*/cukinia_hypervisor.xml"
                    }
                }
            }
        }

        stage("7. Configure Cluster") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            playbooks/ci_configure_cluster.yaml
                        """
                    }
                }
            }
        }

        stage("8. Test Cluster") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            playbooks/ci_cluster_tests.yaml
                        """
                        junit "ansible/playbooks/cluster/*/cukinia_cluster.xml"
                    }
                }
            }
        }

        stage("9. Deploy VM") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            playbooks/ci_deploy_vms.yaml
                        """
                    }
                }
            }
        }

        stage("10. Configure VM") {
            steps {
                script {
                    echo "Configure VMs"
                }
            }
        }

        stage("11. Test VM") {
            steps {
                script {
                    echo "Test VMs"
                }
            }
        }
    }

    post {
        success {
            echo "CI succeed, start 'merge' job."
            build job: "merge"
        }

        failure {
            echo "Did not succeed!"
        }
    }
}
