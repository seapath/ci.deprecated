/*****************************************************************************
 * Jenkins pipeline that runs the CI for already built images.
 *
 * Requirements:
 * - Install plugins: SSH Agent, Blue Ocean, Junit, Pipeline Utility Steps and
 * Throttle Concurrent Builds
 * - Set SSH key with name 'gitlab-credentials' and 'cluster'
 * - Configure Throttle Concurrent Builds according to README.md
 *****************************************************************************/

// Parametrized properties. Default values can be overwritten by setting the
// configuration file /var/jenkins_home/jenkins.properties
def def_values = [GITLAB_URL: "10.132.156.199:2200",
                  GITLAB_USER: "root"]
def p // Global variable to handle properties

def imgs = ["bzImage",
            "seapath-flash-pxe-votp.cpio.gz",
            "seapath-host-bios-image-votp.wic.bmap",
            "seapath-host-bios-image-votp.wic.gz",
            "seapath-monitor-bios-image-votp.wic.bmap",
            "seapath-monitor-bios-image-votp.wic.gz",
            "seapath-guest-efi-image-votp.wic.qcow2"]

pipeline {
    agent any

    // Prevent concurrent execution of jobs tagged with "cluster" category
    options {
        throttleJobProperty(
            categories: ['cluster'],
            throttleEnabled: true,
            throttleOption: 'category',
            maxConcurrentPerNode: 1,
            maxConcurrentTotal: 1)
    }

    // TODO: Add gitlab server fingerprints to known_hosts instead
    environment {
        GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no"
        YOCTO_CACHE_DIR = "/var/jenkins_home/yocto"
        CQFD_EXTRA_RUN_ARGS = "-v ${YOCTO_CACHE_DIR}/dl:/mnt/dl -e DL_DIR=/mnt/dl \
        -v ${YOCTO_CACHE_DIR}/sstate:/mnt/sstate -e SSTATE_DIR=/mnt/sstate"
        BUILD_DIR = "build/tmp/deploy/images/votp"
        CONFIG_FILE = "/var/jenkins_home/jenkins.properties"
    }

    parameters {
        string(name: 'IMAGE_PATH',
               defaultValue: '/var/jenkins_home/images/<user>',
               description: """Directory where built images are located. \
Please create and use a subdirectory inside /var/jenkins_home/images with the \
following files:
- bzImage
- seapath-flash-pxe-votp.cpio.gz
- seapath-host-bios-image-votp.wic.bmap
- seapath-host-bios-image-votp.wic.gz
- seapath-monitor-bios-image-votp.wic.bmap
- seapath-monitor-bios-image-votp.wic.gz
- seapath-guest-efi-image-votp.wic.qcow2

Note: images need to be built with the 'cluster' ansible SSH public key \
(https://r1.sfl.team/attachments/3416).
               """)
    }

    stages {

        stage("1. Prepare Workspace") {
            steps {
                cleanWs()
                script {

                    stage("1.1. Read Config File") {
                        p = readProperties defaults: def_values, file: "${CONFIG_FILE}"
                    }

                    stage("1.2. Check Images Dir") {

                        def imgCheck = true
                        imgs.each { item ->
                            if (!fileExists("${IMAGE_PATH}/${item}")) {
                                echo "Could not find ${item}"
                                imgCheck = false
                            }
                        }

                        if (!imgCheck) {
                            error "Could not find all images, please check ${IMAGE_PATH}"
                        }
                        echo "copying PXE images to root directory"
                        sh """
                            cp ${IMAGE_PATH}/bzImage /var/jenkins_home/images/
                            cp ${IMAGE_PATH}/seapath-flash-pxe-votp.cpio.gz /var/jenkins_home/images/
                        """
                    }

                    stage("1.3. Ansible Prepare") {
                        sshagent(credentials : ['gitlab-credentials']) {
                            sh """
                                git clone -b sfl/master \
                                "[git@$p.GITLAB_URL]:$p.GITLAB_USER/ansible.git"
                                cd ansible
                                ./prepare.sh
                                echo "host_key_checking = False" >> ansible.cfg
                                ansible localhost -m ping
                            """
                        }
                    }
                }
            }
        }

        stage("3. Boot from PXE") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            playbooks/ci_prepare_machine.yaml
                        """
                    }
                }
            }
        }

        stage ("4. Flash Images") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            --extra-vars image_directory="${IMAGE_PATH}" \
                            playbooks/ci_flash_disk.yaml
                        """
                    }
                }
            }
        }

        stage("5. Configure Hosts") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            playbooks/ci_configure_hosts.yaml
                        """
                    }
                }
            }
        }

        stage("6. Test Hosts") {
            steps {
                script {
                    stage("6.1. Test Common") {
                        sshagent(credentials : ['cluster']) {
                            sh """
                                cd ansible
                                ansible-playbook -i inventories/sfl_ci.yaml \
                                playbooks/ci_common_tests.yaml
                            """
                        }
                        junit "ansible/playbooks/common/*/cukinia_common.xml"
                    }
                    stage("6.2. Test Hypervisors") {
                        sshagent(credentials : ['cluster']) {
                            sh """
                                cd ansible
                                ansible-playbook -i inventories/sfl_ci.yaml \
                                playbooks/ci_hypervisor_tests.yaml
                            """
                        }
                        junit "ansible/playbooks/hypervisor/*/cukinia_hypervisor.xml"
                    }
                }
            }
        }

        stage("7. Configure Cluster") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            playbooks/ci_configure_cluster.yaml
                        """
                    }
                }
            }
        }

        stage("8. Test Cluster") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            playbooks/ci_cluster_tests.yaml
                        """
                        junit "ansible/playbooks/cluster/*/cukinia_cluster.xml"
                    }
                }
            }
        }

        stage("9. Deploy VM") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh """
                            cd ansible
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            --extra-vars image_directory="${IMAGE_PATH}" \
                            playbooks/ci_deploy_vms.yaml

                            # Verify correct deployment
                            ansible-playbook -i inventories/sfl_ci.yaml \
                            playbooks/ci_test_vm_status.yaml
                        """
                    }
                }
            }
        }

        stage("10. Configure VM") {
            steps {
                script {
                    echo "Configure VMs"
                }
            }
        }

        stage("11. Test VM") {
            steps {
                script {
                    echo "Test VMs"
                }
            }
        }
    }
}
