/*****************************************************************************
 * Copyright (C) 2021, RTE (http://www.rte-france.com)
 * SPDX-License-Identifier: CC-BY-4.0
 *
 * Jenkins pipeline for synchronizing Gerrit sfl/master with GitLab sfl/master.
 * It uses Poll SCM to check for Gerrit changes and trigger the sync.
 * Once the synchronization is done it triggers the 'ci' job.
 *
 * Requirements:
 * - SSH Agent Plugin
 * - Set SSH credentials ('gerrit-credentials' and 'gitlab-credentials')
 * - Set properties file (by default '/var/jenkins_home/jenkins.properties')
 *****************************************************************************/

def p // Global variable to handle properties

pipeline {
    agent any

    // Prevent concurrent execution of jobs tagged with "sync" category
    options {
        throttleJobProperty(
            categories: ['sync'],
            throttleEnabled: true,
            throttleOption: 'category',
            maxConcurrentPerNode: 1,
            maxConcurrentTotal: 1),
        buildDiscarder (
            logRotator(artifactNumToKeepStr: '20', numToKeepStr: '20'))
    }

    // TODO: Add Gerrit and GitLab server fingerprints to known_hosts instead
    environment {
        GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no"
        CONFIG_FILE = "/var/jenkins_home/jenkins.properties"
    }

    triggers {
        pollSCM "0 3 * * *"
    }

    stages {

        stage("Prepare workspace") {
            steps {
                cleanWs()
                script {
                    if (!fileExists("${CONFIG_FILE}")) {
                        error "Could not find configuration properties file: ${CONFIG_FILE}"
                    }
                    p = readProperties file: "${CONFIG_FILE}"
                }
            }
        }

        stage("Sync meta-seapath") {
            steps {
                dir("meta-seapath") {
                    git branch: 'sfl/master',
                    credentialsId: 'gerrit-credentials',
                    url: "ssh://$p.GERRIT_USER@$p.GERRIT_URL/rte/votp/meta-seapath"

                    sshagent(credentials : ['gitlab-credentials']) {
                        sh """
                            git remote add secondary \
                            "[git@$p.GITLAB_URL]:$p.GITLAB_USER/meta-seapath.git"
                            git fetch secondary sfl/master
                            git push secondary sfl/master
                        """
                    }
                }
            }
        }

        stage("Sync yocto-bsp") {
            steps {
                dir("yocto-bsp") {
                    git branch: 'sfl/master',
                    credentialsId: 'gerrit-credentials',
                    url: "ssh://$p.GERRIT_USER@$p.GERRIT_URL/rte/votp/yocto-bsp"

                    sshagent(credentials : ['gitlab-credentials']) {
                        sh """
                            git remote add secondary \
                            "[git@$p.GITLAB_URL]:$p.GITLAB_USER/yocto-bsp.git"
                            git fetch secondary sfl/master
                            git push secondary sfl/master
                        """
                    }
                }
            }
        }

        stage("Sync repo-manifest") {
            steps {
                dir("repo-manifest") {
                    git branch: 'sfl/master',
                    credentialsId: 'gerrit-credentials',
                    url: "ssh://$p.GERRIT_USER@$p.GERRIT_URL/rte/votp/repo-manifest"

                    sshagent(credentials : ['gitlab-credentials']) {
                        sh """
                            git remote add secondary \
                            "[git@$p.GITLAB_URL]:$p.GITLAB_USER/repo-manifest.git"
                            git fetch secondary sfl/master
                            git push secondary sfl/master
                        """
                    }
                }
            }
        }

        stage("Sync ansible") {
            steps {
                dir("ansible") {
                    git branch: 'sfl/master',
                    credentialsId: 'gerrit-credentials',
                    url: "ssh://$p.GERRIT_USER@$p.GERRIT_URL/rte/votp/ansible"

                    sshagent(credentials : ['gitlab-credentials']) {
                        sh """
                            git remote add secondary \
                            "[git@$p.GITLAB_URL]:$p.GITLAB_USER/ansible.git"
                            git fetch secondary sfl/master
                            git push secondary sfl/master
                        """
                    }
                }
            }
        }

	stage("Sync vm_manager") {
            steps {
                dir("vm_manager") {
                    git branch: 'sfl/master',
                    credentialsId: 'gerrit-credentials',
                    url: "ssh://$p.GERRIT_USER@$p.GERRIT_URL/rte/votp/vm_manager"

                    sshagent(credentials : ['gitlab-credentials']) {
                        sh """
                            git remote add secondary \
                            "[git@$p.GITLAB_URL]:$p.GITLAB_USER/vm_manager.git"
                            git fetch secondary sfl/master
                            git push secondary sfl/master
                        """
                    }
                }
            }
        }

        stage("Sync votp-inventories") {
            steps {
                dir("votp-inventories") {
                    git branch: 'sfl/master',
                    credentialsId: 'gerrit-credentials',
                    url: "ssh://$p.GERRIT_USER@$p.GERRIT_URL/rte/votp/votp-inventories"

                    sshagent(credentials : ['gitlab-credentials']) {
                        sh """
                            git remote add secondary \
                            "[git@$p.GITLAB_URL]:$p.GITLAB_USER/votp-inventories.git"
                            git fetch secondary sfl/master
                            git push secondary sfl/master
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Synchronization finished, starting 'ci' job."
            build job: "ci"
        }

        failure {
            echo "Did not succeed!"
        }
    }
}
